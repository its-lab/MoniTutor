from gluon.scheduler import Scheduler
from hashlib import md5
import json
import datetime
import requests

from gluon.contrib.appconfig import AppConfig
app_conf = AppConfig(reload=False)
ICINGA2_API_USER = app_conf.take("monitutor_env.icinga2_api_user")
ICINGA2_API_PASSWORD = app_conf.take("monitutor_env.icinga2_api_password")
monitutorroot = "/etc/icinga2/conf.d/monitutor/"

def path_init(files, path):
    import os
    #path = "/etc/icinga2/conf.d/monitutor/"
    if not os.path.isdir(path):
        os.mkdir(path, 0755)
    if len(files) > 0:
        for filex in files:
            if not os.path.exists(path+filex):
                ftemp = open(path+filex, "w+")
                ftemp.close()
    return True

# TODO: Closure -> file_init_root(files) with default path /etc/icinga2/conf.d/monitutor/


# Basic icinga2 templates.
def base_templates():
    path_init(["templates.conf"], path="/etc/icinga2/conf.d/monitutor/")
    basic_templates = """///--Generated by MoniTutor
template Service "monitutor-check" {
  check_interval = 5m
  retry_interval = 1m
  enable_perfdata = true
  check_command = "passive"
  enable_notifications = false
  enable_active_checks = false
  enable_passive_checks = true
  }

template Host "monitutor-system" {
  check_interval = 3m
  retry_interval = 1m
  check_command = "passive"
  enable_passive_checks = true
  enable_active_checks = true
  enable_notifications = false
  }
    """
    f_basic_templates = open("/etc/icinga2/conf.d/monitutor/templates.conf", "w+")
    if md5(str(basic_templates)) != md5(str(f_basic_templates.read())):
        f_basic_templates.seek(0)
        f_basic_templates.writelines(basic_templates)
    f_basic_templates.close()
    return True


# Initialize system templates.
def init_system(systemid):
    system = tutordb.monitutor_systems[systemid]
    custom_vars = tutordb(tutordb.monitutor_customvar_system.system_id == systemid).select()
    systemobject="""///Generated by Monitutor\n"""
    systemobject += 'template Host "' + system.name + '" {\n'
    systemobject += '  import "monitutor-system"\n'
    systemobject += '  display_name = "' + system.display_name +'"\n'
    if system.ip4_address is not None:
        systemobject += '  address = "' + system.ip4_address +'"\n'
    if system.ip6_address is not None:
        systemobject += '  address6 = "' + system.ip6_address +'"\n'
    if system.description is not None:
        systemobject += '  notes = "'
        lines = str(system.description).splitlines()
        for line in lines:
            systemobject += line +"<br>"
        systemobject += '"\n'
    for custom_var in custom_vars:
        systemobject += '  vars.' + custom_var.name + ' = "' + custom_var.value + '"\n'
    systemobject += '}\n'
    filename = monitutorroot + "systems/" + system.name + ".conf"
    path_init([system.name+".conf"], path=monitutorroot+"systems/")
    f_system = open(filename, "w+")
    if md5(str(systemobject)) != md5(str(f_system.read())):
        f_system.seek(0)
        f_system.writelines(systemobject)
    f_system.close()

    # TODO: initiate all system templates on demand -> add_system.
    return True


def init_system_all():
    systems = tutordb().select(tutordb.monitutor_systems.ALL)
    for system in systems:
        init_system(system.system_id)
    return True


# initialize check templates.
def init_check(checkid):
    check = tutordb.monitutor_checks[checkid]

    checktemplate = '''///Generated by Monitutor\n
template Service "'''
    checktemplate += check.name + '" {\n'
    checktemplate += '  import "monitutor-check" \n'
    checktemplate += '\n  display_name = "' + check.display_name + '" \n'
    if check.hint is not None:
        checktemplate += '  notes = "'
        for line in str(check.hint).splitlines():
            checktemplate += line + "<br>"
        checktemplate += '"\n'
    checktemplate += '}\n\n'

    filename = monitutorroot + "checks/" + check.name + ".conf"
    path_init([check.name+".conf"], path=monitutorroot+"checks/")
    f_check = open(filename, "w+")
    if md5(str(checktemplate)) != md5(str(f_check.read())):
        f_check.seek(0)
        f_check.writelines(checktemplate)
    f_check.close()

    targets = tutordb((tutordb.monitutor_checks.check_id == tutordb.monitutor_targets.check_id) &
                      (tutordb.monitutor_checks.check_id == checkid)).select()

    initialized_t = [0, ]
    for target in targets:
        if target.monitutor_targets.system_id not in initialized_t:
            init_system(target.monitutor_targets.system_id)
            initialized_t.append(target.monitutor_targets.system_id)

    return True


def init_check_all():
    checks = tutordb().select(tutordb.monitutor_checks.ALL)
    for check in checks:
        init_check(check.check_id)
    return True


def init_milestone(milestoneid):
    checks = tutordb((tutordb.monitutor_milestones.milestone_id == tutordb.monitutor_check_milestone.milestone_id) &
                     (tutordb.monitutor_milestones.milestone_id == milestoneid)).select()

    initialized_c = []
    if checks is not None:
        for check in checks:
            if check.monitutor_check_milestone.check_id not in initialized_c:
                init_check(check.monitutor_check_milestone.check_id)
                initialized_c.append(check.monitutor_check_milestone.check_id)
    return True


def init_milestone_all():
    milestones = tutordb().select(tutordb.monitutor_milestones.ALL)
    for milestone in milestones:
        init_milestone(milestone.milestone_id)
    return True


def init_scenario(scenarioid):
    base_templates()
    milestones = tutordb((tutordb.monitutor_scenarios.scenario_id == tutordb.monitutor_milestone_scenario.scenario_id) &
                         (tutordb.monitutor_scenarios.scenario_id == scenarioid)).select()

    initialized_m = []
    if milestones is not None:
        for milestone in milestones:
            if milestone.monitutor_milestone_scenario.milestone_id not in initialized_m:
                init_milestone(milestone.monitutor_milestone_scenario.milestone_id)
                initialized_m.append(milestone.monitutor_milestone_scenario.milestone_id)
    restart_icinga()
    tutordb(tutordb.monitutor_scenarios.scenario_id == scenarioid).update(initiated=True)
    tutordb.commit()
    return True


def restart_icinga():
    request_url = "https://localhost:5665/v1/actions/restart-process"
    headers = {
               'Accept': 'application/json',
               }
    requests.post(request_url,
            headers=headers,
            auth=(ICINGA2_API_USER, ICINGA2_API_PASSWORD),
            verify=False)
    return True


def api_init_scenario( username, scenarioid):
    scenario_items = tutordb((tutordb.monitutor_scenarios.scenario_id ==
                              tutordb.monitutor_milestone_scenario.scenario_id) &
                       (tutordb.monitutor_milestone_scenario.milestone_id ==
                        tutordb.monitutor_milestones.milestone_id) &
                       (tutordb.monitutor_milestones.milestone_id == tutordb.monitutor_check_milestone.milestone_id) &
                       (tutordb.monitutor_check_milestone.check_id == tutordb.monitutor_checks.check_id) &
                       (tutordb.monitutor_checks.check_id == tutordb.monitutor_targets.check_id) &
                       (tutordb.monitutor_targets.system_id == tutordb.monitutor_systems.system_id) &
                       (tutordb.monitutor_scenarios.scenario_id == scenarioid)&
                       (tutordb.monitutor_targets.type_id == 1)).select()
    hosts = {}
    services = {}

    for item in scenario_items:
        hosts[item.monitutor_systems.name] = item.monitutor_systems.name
        services[item.monitutor_checks.name] = {"servicename":item.monitutor_checks.name,
                                                "hostname":item.monitutor_systems.name,
                                                "display_name":item.monitutor_checks.display_name}

    for host in hosts:
        api_create_host(hostname=host, username=username)

    for service in services:
        api_create_service(service=services[service], username=username)
    user = tutordb(tutordb.auth_user.username == username).select()
    if len(user):
        tutordb.scenario_user.update_or_insert((tutordb.scenario_user.scenario_id == scenarioid) &
                                           (tutordb.scenario_user.user_id == user[0].id),
                                            scenario_id=scenarioid,
                                            user_id=user[0].id,
                                            status="initiated",
                                            initiation_time=datetime.datetime.now())

        tutordb.commit()

    return True


def api_create_host(hostname, username):
    request_url = "https://localhost:5665/v1/objects/hosts/" + username + "_" + hostname
    headers = {
               'Accept': 'application/json',
               }
    data = {
            "templates": [hostname],
            "attrs": {"vars.owner": username}
            }

    requests.put(request_url,
            headers=headers,
            auth=(ICINGA2_API_USER, ICINGA2_API_PASSWORD),
            data=json.dumps(data),
            verify=False)
    return True

def api_create_service(service, username):
    request_url = "https://localhost:5665/v1/objects/services/" + username + "_" + service["hostname"] + "!" + username + "_" + service["servicename"]
    headers = {
               'Accept': 'application/json',
               }
    data = {
            "templates": [service["servicename"]],
            "attrs": {"host_name": service["hostname"], "display_name": service["display_name"]}
            }

    requests.put(request_url,
            headers=headers,
            auth=( ICINGA2_API_USER, ICINGA2_API_PASSWORD),
            data=json.dumps(data),
            verify=False)
    return True

def drop_user_scenario( username, scenarioid):
    scenario_items = tutordb((tutordb.monitutor_scenarios.scenario_id == tutordb.monitutor_milestone_scenario.scenario_id)&
                       (tutordb.monitutor_milestone_scenario.milestone_id == tutordb.monitutor_milestones.milestone_id)&
                       (tutordb.monitutor_milestones.milestone_id == tutordb.monitutor_check_milestone.milestone_id)&
                       (tutordb.monitutor_check_milestone.check_id == tutordb.monitutor_checks.check_id)&
                       (tutordb.monitutor_checks.check_id == tutordb.monitutor_targets.check_id)&
                       (tutordb.monitutor_targets.system_id == tutordb.monitutor_systems.system_id)&
                       (tutordb.monitutor_scenarios.scenario_id == scenarioid)).select()
    hosts = {}

    for item in scenario_items:
        hosts[item.monitutor_systems.name] = item.monitutor_systems.name

    for host in hosts:
        if drop_host(hostname=username+"_"+host) is False:
            return False

    return True



def drop_host(hostname):
    request_url = "https://localhost:5665/v1/objects/hosts/" + hostname + "?cascade=1"
    headers = {
        'Accept': 'application/json',
        }
    data={}
    r = requests.delete(request_url,
        headers=headers,
        auth=(ICINGA2_API_USER, ICINGA2_API_PASSWORD),
        data=json.dumps(data),
        verify=False)




init_funcs = {"base_templates": base_templates,
              "init_system": init_system,
              "init_check": init_check,
              "init_check_all": init_check_all,
              "init_systems_all": init_system_all,
              "init_milestone": init_milestone,
              "init_milestone_all": init_milestone_all,
              "init_scenario": init_scenario,
              "restart_icinga": restart_icinga,
              "drop_user_scenario": drop_user_scenario,
              "api_init_scenario": api_init_scenario}





if isinstance(tutordb, DAL):
    initializer = Scheduler(tutordb, group_names=['init',], tasks=dict(init_funcs))


    #initializer.queue_task('drop_user_scenario', group_name="init", pargs=["ms5366s", 7])
    #initializer.queue_task('api_init_scenario', group_name="init", pargs=["ms5366s", 7])


    #initializer.queue_task('new_scenario', group_name="init", pargs=[1, 3])
    #initializer.queue_task('new_system', group_name="init", pargs=[1, 1])
    #initializer.queue_task('init_systems_all', group_name="init")
    #initializer.queue_task('init_milestone_all', group_name="init")
    #initializer.queue_task('init_scenario', group_name="init", pargs=[3])
    #initializer.queue_task('init_system', group_name="init", pargs=[2])
    #initializer.queue_task('scenario_service', group_name="init", pargs=[2])
    #initializer.queue_task('base_templates', group_name="init")

